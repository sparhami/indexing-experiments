// source: proto/protoWordShard.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ProtoWordShard.Document', null, global);
goog.exportSymbol('proto.ProtoWordShard.DocumentEntry', null, global);
goog.exportSymbol('proto.ProtoWordShard.WordEntry', null, global);
goog.exportSymbol('proto.ProtoWordShard.WordEntry.WordCase', null, global);
goog.exportSymbol('proto.ProtoWordShard.WordLocation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoWordShard.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoWordShard.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoWordShard.Document.displayName = 'proto.ProtoWordShard.Document';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoWordShard.WordLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoWordShard.WordLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoWordShard.WordLocation.displayName = 'proto.ProtoWordShard.WordLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoWordShard.WordEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoWordShard.WordEntry.repeatedFields_, proto.ProtoWordShard.WordEntry.oneofGroups_);
};
goog.inherits(proto.ProtoWordShard.WordEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoWordShard.WordEntry.displayName = 'proto.ProtoWordShard.WordEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoWordShard.DocumentEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoWordShard.DocumentEntry.repeatedFields_, null);
};
goog.inherits(proto.ProtoWordShard.DocumentEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoWordShard.DocumentEntry.displayName = 'proto.ProtoWordShard.DocumentEntry';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoWordShard.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoWordShard.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoWordShard.Document} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    revision: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoWordShard.Document}
 */
proto.ProtoWordShard.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoWordShard.Document;
  return proto.ProtoWordShard.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoWordShard.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoWordShard.Document}
 */
proto.ProtoWordShard.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoWordShard.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoWordShard.Document.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoWordShard.Document} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.Document.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRevision();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ProtoWordShard.Document.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoWordShard.Document} returns this
 */
proto.ProtoWordShard.Document.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 revision = 2;
 * @return {number}
 */
proto.ProtoWordShard.Document.prototype.getRevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoWordShard.Document} returns this
 */
proto.ProtoWordShard.Document.prototype.setRevision = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoWordShard.WordLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoWordShard.WordLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoWordShard.WordLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.WordLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    codepointIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoWordShard.WordLocation}
 */
proto.ProtoWordShard.WordLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoWordShard.WordLocation;
  return proto.ProtoWordShard.WordLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoWordShard.WordLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoWordShard.WordLocation}
 */
proto.ProtoWordShard.WordLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWordIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCodepointIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoWordShard.WordLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoWordShard.WordLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoWordShard.WordLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.WordLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCodepointIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 word_index = 1;
 * @return {number}
 */
proto.ProtoWordShard.WordLocation.prototype.getWordIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoWordShard.WordLocation} returns this
 */
proto.ProtoWordShard.WordLocation.prototype.setWordIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 codepoint_index = 2;
 * @return {number}
 */
proto.ProtoWordShard.WordLocation.prototype.getCodepointIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoWordShard.WordLocation} returns this
 */
proto.ProtoWordShard.WordLocation.prototype.setCodepointIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoWordShard.WordEntry.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoWordShard.WordEntry.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ProtoWordShard.WordEntry.WordCase = {
  WORD_NOT_SET: 0,
  TEXT: 1,
  INDEX: 2
};

/**
 * @return {proto.ProtoWordShard.WordEntry.WordCase}
 */
proto.ProtoWordShard.WordEntry.prototype.getWordCase = function() {
  return /** @type {proto.ProtoWordShard.WordEntry.WordCase} */(jspb.Message.computeOneofCase(this, proto.ProtoWordShard.WordEntry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoWordShard.WordEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoWordShard.WordEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoWordShard.WordEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.WordEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wordLocationsList: jspb.Message.toObjectList(msg.getWordLocationsList(),
    proto.ProtoWordShard.WordLocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoWordShard.WordEntry}
 */
proto.ProtoWordShard.WordEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoWordShard.WordEntry;
  return proto.ProtoWordShard.WordEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoWordShard.WordEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoWordShard.WordEntry}
 */
proto.ProtoWordShard.WordEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = new proto.ProtoWordShard.WordLocation;
      reader.readMessage(value,proto.ProtoWordShard.WordLocation.deserializeBinaryFromReader);
      msg.addWordLocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoWordShard.WordEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoWordShard.WordEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoWordShard.WordEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.WordEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getWordLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtoWordShard.WordLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.ProtoWordShard.WordEntry.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoWordShard.WordEntry} returns this
 */
proto.ProtoWordShard.WordEntry.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.ProtoWordShard.WordEntry.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProtoWordShard.WordEntry} returns this
 */
proto.ProtoWordShard.WordEntry.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 1, proto.ProtoWordShard.WordEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoWordShard.WordEntry.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.ProtoWordShard.WordEntry.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoWordShard.WordEntry} returns this
 */
proto.ProtoWordShard.WordEntry.prototype.setIndex = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ProtoWordShard.WordEntry.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProtoWordShard.WordEntry} returns this
 */
proto.ProtoWordShard.WordEntry.prototype.clearIndex = function() {
  return jspb.Message.setOneofField(this, 2, proto.ProtoWordShard.WordEntry.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoWordShard.WordEntry.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WordLocation word_locations = 3;
 * @return {!Array<!proto.ProtoWordShard.WordLocation>}
 */
proto.ProtoWordShard.WordEntry.prototype.getWordLocationsList = function() {
  return /** @type{!Array<!proto.ProtoWordShard.WordLocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoWordShard.WordLocation, 3));
};


/**
 * @param {!Array<!proto.ProtoWordShard.WordLocation>} value
 * @return {!proto.ProtoWordShard.WordEntry} returns this
*/
proto.ProtoWordShard.WordEntry.prototype.setWordLocationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtoWordShard.WordLocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoWordShard.WordLocation}
 */
proto.ProtoWordShard.WordEntry.prototype.addWordLocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtoWordShard.WordLocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoWordShard.WordEntry} returns this
 */
proto.ProtoWordShard.WordEntry.prototype.clearWordLocationsList = function() {
  return this.setWordLocationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoWordShard.DocumentEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoWordShard.DocumentEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoWordShard.DocumentEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoWordShard.DocumentEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.DocumentEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordEntriesList: jspb.Message.toObjectList(msg.getWordEntriesList(),
    proto.ProtoWordShard.WordEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoWordShard.DocumentEntry}
 */
proto.ProtoWordShard.DocumentEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoWordShard.DocumentEntry;
  return proto.ProtoWordShard.DocumentEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoWordShard.DocumentEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoWordShard.DocumentEntry}
 */
proto.ProtoWordShard.DocumentEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.ProtoWordShard.WordEntry;
      reader.readMessage(value,proto.ProtoWordShard.WordEntry.deserializeBinaryFromReader);
      msg.addWordEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoWordShard.DocumentEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoWordShard.DocumentEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoWordShard.DocumentEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoWordShard.DocumentEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ProtoWordShard.WordEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WordEntry word_entries = 2;
 * @return {!Array<!proto.ProtoWordShard.WordEntry>}
 */
proto.ProtoWordShard.DocumentEntry.prototype.getWordEntriesList = function() {
  return /** @type{!Array<!proto.ProtoWordShard.WordEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoWordShard.WordEntry, 2));
};


/**
 * @param {!Array<!proto.ProtoWordShard.WordEntry>} value
 * @return {!proto.ProtoWordShard.DocumentEntry} returns this
*/
proto.ProtoWordShard.DocumentEntry.prototype.setWordEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ProtoWordShard.WordEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoWordShard.WordEntry}
 */
proto.ProtoWordShard.DocumentEntry.prototype.addWordEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ProtoWordShard.WordEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoWordShard.DocumentEntry} returns this
 */
proto.ProtoWordShard.DocumentEntry.prototype.clearWordEntriesList = function() {
  return this.setWordEntriesList([]);
};


goog.object.extend(exports, proto.ProtoWordShard);
